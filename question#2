#include <iostream>
using namespace std;

class Feature
{
public:
    virtual void analyze() = 0;
};

class LandFeature : public Feature
{
public:
    void analyze()
    {
        cout << "Land feature detected.\n";
    }
};

class WaterFeature : public Feature
{
public:
    void analyze()
    {
        cout << "Water feature detected.\n";
    }
};

struct Node
{
    int FeatureID;
    Feature *feat;
    Node *next;
};

class SinglyLinkedList
{
public:
    Node *head;

    SinglyLinkedList()
    {
        head = NULL;
    }

    void insertAtEnd(int id, Feature *f)
    {
        Node *n = new Node;
        n->FeatureID = id;
        n->feat = f;
        n->next = NULL;

        if (head == NULL)
        {
            head = n;
        }
        else
        {
            Node *temp = head;
            while (temp->next != NULL)
                temp = temp->next;
            temp->next = n;
        }
    }

    void deleteByID(int id)
    {
        Node *temp = head;
        Node *prev = NULL;

        while (temp != NULL)
        {
            if (temp->FeatureID == id)
            {
                if (prev == NULL)
                    head = temp->next;
                else
                    prev->next = temp->next;

                delete temp;
                cout << "Feature with ID " << id << " deleted.\n";
                return;
            }
            prev = temp;
            temp = temp->next;
        }
        cout << "Feature ID not found.\n";
    }

    void displayAll()
    {
        Node *temp = head;
        if (temp == NULL)
        {
            cout << "List empty.\n";
            return;
        }
        while (temp != NULL)
        {
            cout << "ID: " << temp->FeatureID << " -> ";
            temp->feat->analyze();
            temp = temp->next;
        }
    }

    void reverseList()
    {
        Node *prev = NULL, *curr = head, *next = NULL;
        while (curr != NULL)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }
};

int main()
{
    SinglyLinkedList list;

    list.insertAtEnd(1, new LandFeature());
    list.insertAtEnd(2, new WaterFeature());
    list.insertAtEnd(3, new LandFeature());

    cout << "Original List:\n";
    list.displayAll();

    list.deleteByID(2);
    cout << "\nAfter Deletion:\n";
    list.displayAll();

    list.reverseList();
    cout << "\nAfter Reversing:\n";
    list.displayAll();

    return 0;
}
